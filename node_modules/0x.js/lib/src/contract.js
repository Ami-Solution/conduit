"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var json_schemas_1 = require("@0xproject/json-schemas");
var promisify = require("es6-promisify");
var _ = require("lodash");
var types_1 = require("./types");
// HACK: Gas estimates on testrpc don't take into account gas refunds.
// Our calls can trigger max 8 gas refunds for SSTORE per transaction for 15k gas each which gives 120k.
var GAS_MARGIN = 120000;
var Contract = /** @class */ (function () {
    function Contract(web3ContractInstance, defaults) {
        this.contract = web3ContractInstance;
        this.address = web3ContractInstance.address;
        this.abi = web3ContractInstance.abi;
        this.defaults = defaults;
        this.populateEvents();
        this.populateFunctions();
        this.validator = new json_schemas_1.SchemaValidator();
    }
    Contract.prototype.populateFunctions = function () {
        var _this = this;
        var functionsAbi = _.filter(this.abi, function (abiPart) { return abiPart.type === types_1.AbiType.Function; });
        _.forEach(functionsAbi, function (functionAbi) {
            if (functionAbi.constant) {
                var cbStyleCallFunction = _this.contract[functionAbi.name].call;
                _this[functionAbi.name] = {
                    callAsync: promisify(cbStyleCallFunction, _this.contract),
                };
            }
            else {
                var cbStyleFunction = _this.contract[functionAbi.name];
                var cbStyleEstimateGasFunction = _this.contract[functionAbi.name].estimateGas;
                var estimateGasAsync = promisify(cbStyleEstimateGasFunction, _this.contract);
                _this[functionAbi.name] = {
                    estimateGasAsync: estimateGasAsync,
                    sendTransactionAsync: _this.promisifyWithDefaultParams(cbStyleFunction, estimateGasAsync),
                };
            }
        });
    };
    Contract.prototype.populateEvents = function () {
        var _this = this;
        var eventsAbi = _.filter(this.abi, function (abiPart) { return abiPart.type === types_1.AbiType.Event; });
        _.forEach(eventsAbi, function (eventAbi) {
            _this[eventAbi.name] = _this.contract[eventAbi.name];
        });
    };
    Contract.prototype.promisifyWithDefaultParams = function (web3CbStyleFunction, estimateGasAsync) {
        var _this = this;
        var promisifiedWithDefaultParams = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                var promise;
                return __generator(this, function (_a) {
                    promise = new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var lastArg, txData, removeUndefinedProperties, estimatedGas, gas, err_1, callback;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    lastArg = args[args.length - 1];
                                    txData = {};
                                    if (!_.isUndefined(lastArg) && this.isTxData(lastArg)) {
                                        txData = args.pop();
                                    }
                                    removeUndefinedProperties = _.pickBy;
                                    txData = __assign({}, removeUndefinedProperties(this.defaults), removeUndefinedProperties(txData));
                                    if (!_.isUndefined(txData.gas)) return [3 /*break*/, 4];
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, estimateGasAsync.apply(this.contract, args.concat([txData]))];
                                case 2:
                                    estimatedGas = _a.sent();
                                    gas = estimatedGas + GAS_MARGIN;
                                    txData.gas = gas;
                                    return [3 /*break*/, 4];
                                case 3:
                                    err_1 = _a.sent();
                                    reject(err_1);
                                    return [2 /*return*/];
                                case 4:
                                    callback = function (err, data) { return _.isNull(err) ? resolve(data) : reject(err); };
                                    args.push(txData);
                                    args.push(callback);
                                    web3CbStyleFunction.apply(this.contract, args);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    return [2 /*return*/, promise];
                });
            });
        };
        return promisifiedWithDefaultParams;
    };
    Contract.prototype.isTxData = function (lastArg) {
        var isValid = this.validator.isValid(lastArg, json_schemas_1.schemas.txDataSchema);
        return isValid;
    };
    return Contract;
}());
exports.Contract = Contract;
//# sourceMappingURL=contract.js.map